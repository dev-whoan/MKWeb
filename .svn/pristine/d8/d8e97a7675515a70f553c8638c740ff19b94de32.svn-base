package com.mkweb.dispatcher;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.mkweb.logger.MkLogger;
import com.mkweb.abst.PageXmlData;
import com.mkweb.config.PageConfigs;
/**
 * Servlet implementation class MkDispatcher
 */
public class defaultDispatcher extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public defaultDispatcher() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		doPost(request, response);
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
	//	doGet(request, response);
		Object o = request.getAttribute("page_type");
		if( isErrorPage(o) == 0 || isErrorPage(o) == 1)
		{
			String[] requestURI = request.getRequestURI().split("/");
			String requestViewPage = requestURI[requestURI.length - 1];
			MkLogger.error(requestViewPage);
			String[] requestInfo = requestViewPage.split(".");
			
			ArrayList<PageXmlData> resultXmlData = PageConfigs.getControl(requestViewPage);
			
			if(resultXmlData == null || resultXmlData.size() < 1)
			{
				MkLogger.error("땡");
				request.setAttribute("page_type", "true");
				RequestDispatcher dispatcher = this.getServletContext().getRequestDispatcher("/600.html");
				dispatcher.forward(request, response);
				return;
			}
			request.setAttribute("page_type", "false");
			MkLogger.error("정상페이지 drfd");
			
			/*
			 * 여기서 쓸 것 : pageName, controlName
			 * 가져 갈 것   :
			 * sql[1](obj default), sql[2] (rst default) , value ( 쿼리 매개변수 지정 ), serviceName ( sql 쿼리 지정 )
			 * debug, param, 
			 */
			
			HashMap<String, ArrayList<PageXmlData>> pageAttributes = new HashMap<String, ArrayList<PageXmlData>>();
		/*	pageAttributes.compute(key, remappingFunction);
			
			for(int i = 0; i < resultXmlData.size(); i++)
			{
				request.setAttribute("userID", uId);
				request.setAttribute("userName", uKakaoName);
				PageConfigs.printPageInfo(resultXmlData.get(i));
			}
			*/
		}else if( isErrorPage(o) == 2 ){
			MkLogger.error("에러 페이지");
			MkLogger.error(request.getRequestURL());
		}
	}
	
	private int isErrorPage(Object o) {
		if(o != null && o.toString().equals("false"))
			return 0;
		else if(o == null)
			return 1;
		else if(o.toString().equals("true"))
			return 2;
		
		return 0;
	}
}
